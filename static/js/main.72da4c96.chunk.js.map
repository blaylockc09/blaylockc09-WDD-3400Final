{"version":3,"sources":["states.js","components/StateDisplay/StateDisplay.js","components/Modal/Modal.js","components/AmericaDisplay/AmericaDisplay.js","App.js","services/covidApi.js","index.js"],"names":["states","StateDisplay","stateData","className","state","value","totalTestResults","displayType","thousandSeparator","positive","negative","hospitalizedCurrently","recovered","death","Modal","activeState","toggleOpen","modalOpen","onClick","open","AmericaDisplay","data","hospitalized","App","useState","setActiveState","covidUSData","setCovidUSData","covidStatesData","setCovidStatesData","setFetchError","toggleModalOpen","useEffect","fetch","then","res","json","catch","customize","generateHexColorForState","stateCode","highest","sort","a","b","total","hexValue","find","o","AL","fill","AK","AS","AZ","AR","CA","CO","CT","DE","DC","FL","GA","GU","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","MP","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VI","VA","WA","WV","WI","WY","statesCustomConfig","event","target","dataset","name","onMouseEnter","setState","toggleHoverState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72da4c96.chunk.js","sourcesContent":["const states = {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AS\": \"American Samoa\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FM\": \"Federated States Of Micronesia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"GU\": \"Guam\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MH\": \"Marshall Islands\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"MP\": \"Northern Mariana Islands\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"PR\": \"Puerto Rico\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n}\n\nexport default states;","import React from \"react\";\nimport \"./StateDisplay.scss\";\nimport states from \"../../states\";\n\nimport NumberFormat from 'react-number-format';\n\n\nconst StateDisplay = ({ stateData }) => {\n  /* return the state data and display on the modal */\n  return (\n    <div className=\"StateDisplay\">\n      <h1>{states[stateData.state]} COVID-19 Data</h1>\n      <p className=\"total-tested\">\n        <span>Total Tested: </span>\n         {/* The numberFormat will show commas in the number */}\n        <NumberFormat value= {stateData.totalTestResults} displayType={'text'} thousandSeparator={true}/>  \n       \n      </p>\n      <p className=\"total-positive\">\n        <span>Positive Tests</span>\n         {/* The numberFormat will show commas in the number */}\n        <NumberFormat value= {stateData.positive} displayType={'text'} thousandSeparator={true}/>  \n        \n      </p>\n      <p className=\"total-negative\">\n        <span>Negative Tests</span>\n         {/* The numberFormat will show commas in the number */}\n        <NumberFormat value= {stateData.negative} displayType={'text'} thousandSeparator={true}/>  \n        \n      </p>\n      <p className=\"total-hospitalized\">\n        <span>Currently Hospitalized: </span>\n         {/* The numberFormat will show commas in the number */}\n        <NumberFormat value= {stateData.hospitalizedCurrently || \"No Data\"} displayType={'text'} thousandSeparator={true}/>  \n        \n      </p>\n      <p className=\"total-recovered\">\n        <span>Recovered: </span>\n         {/* The numberFormat will show commas in the number */}\n        <NumberFormat value= {stateData.recovered || \"No Data\"} displayType={'text'} thousandSeparator={true}/>  \n        \n      </p>\n      <p className=\"total-deaths\">\n        <span>Total Deaths: </span>\n         {/* The numberFormat will show commas in the number */}\n        <NumberFormat value= {stateData.death} displayType={'text'} thousandSeparator={true}/>  \n        \n      </p>\n    </div>\n  );\n};\n\nexport default StateDisplay;\n","import React from \"react\";\nimport StateDisplay from \"../StateDisplay/StateDisplay\";\nimport \"./Modal.scss\";\n\n\n/* Use modal to display state data */\n\nconst Modal = ({ activeState, toggleOpen, modalOpen }) => {\n  return (\n    \n    <div className={`Modal ${!modalOpen && \"hidden\"}`}>\n      <button\n        className=\"close-button\"\n        onClick={() => toggleOpen((open) => !open)}\n      >\n        X\n      </button>\n      {activeState ? (\n        <StateDisplay stateData={activeState} />\n      ) : (\n        <div className=\"no-state-info\">\n          <h1>Unable to get COVID-19 data.</h1>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Modal;\n","import React from \"react\";\nimport \"./AmericaDisplay.scss\";\nimport NumberFormat from 'react-number-format';\n\n\nconst AmericaDisplay = ({ data }) => {\n\n  \n  return (\n    // display the data on the front page\n    <div className=\"AmericaDisplay\">\n      <h1>Nationwide COVID-19 Data</h1>\n      {data ? (\n        <div>\n          <p>\n            <label>Total Test Results:</label>\n            {/* The numberFormat will show commas in the number */}\n            <NumberFormat value={data.totalTestResults} displayType={'text'} thousandSeparator={true}/>         \n          </p>\n          <p>\n            <label>Total Positive:</label>\n               {/* The numberFormat will show commas in the number */}\n            <NumberFormat value={data.positive} displayType={'text'} thousandSeparator={true}/>           \n          </p>\n          <p>\n            <label>Total Negative:</label>\n               {/* The numberFormat will show commas in the number */}\n            <NumberFormat value={data.negative} displayType={'text'} thousandSeparator={true}/>            \n          </p>\n          <p>\n            <label>Total Hospitalized:</label>\n               {/* The numberFormat will show commas in the number */}\n            <NumberFormat value={data.hospitalized} displayType={'text'} thousandSeparator={true}/>            \n          </p>\n          <p>\n            <label>Total Deaths:</label>\n               {/* The numberFormat will show commas in the number */}\n            <NumberFormat value= {data.death} displayType={'text'} thousandSeparator={true} />           \n          </p>\n          <p>\n\n       {/*    <form>\n              <div className=\"radio\">\n                <label>\n                  <input type=\"radio\" value=\"yes\" checked={true} />\n                  Yes\n                </label>\n              </div>\n              <div className=\"radio\">\n                <label>\n                  <input type=\"radio\" value=\"no\" />\n                  No\n                </label>\n              </div>\n         </form> */}\n            \n          </p>\n         \n        </div>\n      ) : (\n        /* Display error if the data cannot be shown */\n        <h1>Unable to get COVID-19 data.</h1>\n      )}\n\n\n      \n    </div>\n  );\n};\n\nexport default AmericaDisplay;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport USAMap from \"react-usa-map\";\nimport Modal from \"./components/Modal/Modal\";\nimport { getCovidStatesData, getCovidUSData } from \"./services/covidApi\";\nimport AmericaDisplay from \"./components/AmericaDisplay/AmericaDisplay.js\";\n\n\nfunction App() {\n\n  const [activeState, setActiveState] = useState(null);\n  const [covidUSData, setCovidUSData] = useState(null);\n  const [covidStatesData, setCovidStatesData] = useState(null);\n  const [fetchError, setFetchError] = useState(null);\n  const [modalOpen, toggleModalOpen] = useState(false);\n\n  useEffect(() => {\n    getCovidStatesData().then(setCovidStatesData).catch(setFetchError);\n    getCovidUSData().then(setCovidUSData).catch(setFetchError);\n  }, []);\n\n  const statesCustomConfig = () => {\n    const generateHexColorForState = (stateCode) => {\n      const highest = covidStatesData.sort((a, b) => b.total - a.total)[0];\n      const hexValue =\n        255 -\n        (covidStatesData.find((o) => o.state === stateCode).totalTestResults /\n          highest.totalTestResults) *\n          255;\n\n      return `rgb(220, ${hexValue}, ${hexValue}`;\n    };\n\n\n    /* generate colors based on amount of infections */\n    return covidUSData && covidStatesData\n      ? {\n          AL: {\n            fill: `${generateHexColorForState(\"AL\")})`,\n          },\n          AK: {\n            fill: `${generateHexColorForState(\"AK\")})`,\n          },\n          AS: {\n            fill: `${generateHexColorForState(\"AS\")})`,\n          },\n          AZ: {\n            fill: `${generateHexColorForState(\"AZ\")})`,\n          },\n          AR: {\n            fill: `${generateHexColorForState(\"AR\")})`,\n          },\n          CA: {\n            fill: `${generateHexColorForState(\"CA\")})`,\n          },\n          CO: {\n            fill: `${generateHexColorForState(\"CO\")})`,\n          },\n          CT: {\n            fill: `${generateHexColorForState(\"CT\")})`,\n          },\n          DE: {\n            fill: `${generateHexColorForState(\"DE\")})`,\n          },\n          DC: {\n            fill: `${generateHexColorForState(\"DC\")})`,\n          },\n\n          FL: {\n            fill: `${generateHexColorForState(\"FL\")})`,\n          },\n          GA: {\n            fill: `${generateHexColorForState(\"DC\")})`,\n          },\n          GU: {\n            fill: `${generateHexColorForState(\"GU\")})`,\n          },\n          HI: {\n            fill: `${generateHexColorForState(\"HI\")})`,\n          },\n          ID: {\n            fill: `${generateHexColorForState(\"ID\")})`,\n          },\n          IL: {\n            fill: `${generateHexColorForState(\"IL\")})`,\n          },\n          IN: {\n            fill: `${generateHexColorForState(\"IN\")})`,\n          },\n          IA: {\n            fill: `${generateHexColorForState(\"IA\")})`,\n          },\n          KS: {\n            fill: `${generateHexColorForState(\"KS\")})`,\n          },\n          KY: {\n            fill: `${generateHexColorForState(\"KY\")})`,\n          },\n          LA: {\n            fill: `${generateHexColorForState(\"LA\")})`,\n          },\n          ME: {\n            fill: `${generateHexColorForState(\"ME\")})`,\n          },\n          MD: {\n            fill: `${generateHexColorForState(\"MD\")})`,\n          },\n          MA: {\n            fill: `${generateHexColorForState(\"MA\")})`,\n          },\n          MI: {\n            fill: `${generateHexColorForState(\"MI\")})`,\n          },\n          MN: {\n            fill: `${generateHexColorForState(\"MN\")})`,\n          },\n          MS: {\n            fill: `${generateHexColorForState(\"MS\")})`,\n          },\n          MO: {\n            fill: `${generateHexColorForState(\"MO\")})`,\n          },\n          MT: {\n            fill: `${generateHexColorForState(\"MT\")})`,\n          },\n          NE: {\n            fill: `${generateHexColorForState(\"NE\")})`,\n          },\n          NV: {\n            fill: `${generateHexColorForState(\"NV\")})`,\n          },\n          NH: {\n            fill: `${generateHexColorForState(\"NH\")})`,\n          },\n          NJ: {\n            fill: `${generateHexColorForState(\"NJ\")})`,\n          },\n          NM: {\n            fill: `${generateHexColorForState(\"NM\")})`,\n          },\n          NY: {\n            fill: `${generateHexColorForState(\"NY\")})`,\n          },\n          NC: {\n            fill: `${generateHexColorForState(\"NC\")})`,\n          },\n          ND: {\n            fill: `${generateHexColorForState(\"ND\")})`,\n          },\n          MP: {\n            fill: `${generateHexColorForState(\"MP\")})`,\n          },\n          OH: {\n            fill: `${generateHexColorForState(\"OH\")})`,\n          },\n          OK: {\n            fill: `${generateHexColorForState(\"OK\")})`,\n          },\n          OR: {\n            fill: `${generateHexColorForState(\"OR\")})`,\n          },\n          PA: {\n            fill: `${generateHexColorForState(\"PA\")})`,\n          },\n          PR: {\n            fill: `${generateHexColorForState(\"PR\")})`,\n          },\n          RI: {\n            fill: `${generateHexColorForState(\"RI\")})`,\n          },\n          SC: {\n            fill: `${generateHexColorForState(\"SC\")})`,\n          },\n          SD: {\n            fill: `${generateHexColorForState(\"SD\")})`,\n          },\n          TN: {\n            fill: `${generateHexColorForState(\"TN\")})`,\n          },\n          TX: {\n            fill: `${generateHexColorForState(\"TX\")})`,\n          },\n          UT: {\n            fill: `${generateHexColorForState(\"UT\")})`,\n          },\n          VT: {\n            fill: `${generateHexColorForState(\"VT\")})`,\n          },\n          VI: {\n            fill: `${generateHexColorForState(\"VI\")})`,\n          },\n          VA: {\n            fill: `${generateHexColorForState(\"VA\")})`,\n          },\n          WA: {\n            fill: `${generateHexColorForState(\"WA\")})`,\n          },\n          WV: {\n            fill: `${generateHexColorForState(\"WV\")})`,\n          },\n          WI: {\n            fill: `${generateHexColorForState(\"WI\")})`,\n          },\n          WY: {\n            fill: `${generateHexColorForState(\"WY\")})`,\n          },\n        }\n      : {};\n  };\n\n\n \n  const content= (event) => {\n    this.setState(this.toggleHoverState);\n  };\n\n  const handleMapClick = (event) => {\n    if (covidStatesData) {\n      const stateData = covidStatesData.find(\n        (o) => o.state === event.target.dataset.name\n      );\n      setActiveState(stateData);\n      toggleModalOpen((open) => !open);\n    }\n  };\n\n  \n\n /* Display all information for the app */\n  return (\n    <div className=\"App\">\n      \n      <AmericaDisplay data={covidUSData} />\n\n      <USAMap\n        className=\"Map\"\n        customize={statesCustomConfig()}\n        onClick={ handleMapClick}\n        onMouseEnter={content}\n       \n      />\n\n\n      <Modal\n        activeState={activeState}\n        modalOpen={modalOpen}\n        toggleOpen={toggleModalOpen}\n      />\n     \n    </div>\n  );\n}\n\nexport default App;\n","/* Get the api data STATE DATA*/\n\nexport const getCovidStatesData = () => {\n  return fetch(\"https://api.covidtracking.com/v1/states/current.json\")\n    .then((res) => res.json())\n    .catch(() => {\n      throw \"Unable to fetch COVID-19 data.\";\n    });\n};\n\n\n/* Get the api data  ALL DATA*/\nexport const getCovidUSData = () => {\n  return fetch(\"https://api.covidtracking.com/v1/us/current.json\")\n    .then((res) => res.json())\n    .then((data) => data[0])\n    .catch(() => {\n      throw \"Unable to fetch COVID-19 data.\";\n    });\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />\n  ,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}